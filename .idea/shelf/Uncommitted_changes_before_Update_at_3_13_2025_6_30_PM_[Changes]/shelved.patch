Index: polls/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import requests\r\nfrom django.core.validators import EmailValidator\r\nfrom django.contrib.auth.views import logout_then_login\r\nfrom django.shortcuts import render\r\nfrom django.contrib import messages\r\n\r\n# Create your views here.\r\nfrom django.shortcuts import render, redirect\r\nfrom django.views import View\r\nfrom django.core.exceptions import ValidationError\r\nfrom django.utils import timezone\r\n\r\n\r\nfrom Methods.Login import Login\r\nfrom Methods.forms import CreateAccountForm\r\nfrom polls.models import User, Event\r\nfrom Methods.sendgrid_reset import CustomTokenGenerator, send_reset_email\r\nfrom polls.models import User\r\nimport re\r\n\r\n#For resetting password\r\nfrom django.contrib.auth import views as auth_views\r\nfrom django.shortcuts import render\r\nfrom Methods.reset import Reset\r\nfrom django.utils.http import urlsafe_base64_decode\r\nfrom django.contrib.auth.tokens import default_token_generator\r\nfrom Methods.CustomTokenGenerator import CustomTokenGenerator\r\n\r\n\r\n\r\nfrom Methods.change_account_details import change_account_details\r\nfrom django.shortcuts import get_object_or_404\r\n\r\n\r\nfrom Methods.sendgrid_email import send_confirmation_email\r\nfrom django.contrib.auth import logout\r\n\r\nimport folium\r\nfrom folium.plugins import MarkerCluster\r\n\r\n# Create your views here.\r\nclass LoginAuth(View):\r\n\r\n    def get(self, request):\r\n        request.session.pop('id', None)  # Remove user ID from session\r\n        return render(request, \"login.html\")\r\n\r\n    def post(self, request):\r\n        email = request.POST.get('email')\r\n        password = request.POST.get('password')\r\n\r\n        # Initialize errors dictionary\r\n        errors = {}\r\n\r\n        login = Login()\r\n        # Check if fields are blank\r\n        if not login.isNotBlank(email, password):\r\n            return render(request, \"login.html\", {\"error\": \"Invalid email or password\"})\r\n        elif login.authenticate(email, password):\r\n                user = User.objects.get(email=email)\r\n                request.session['email'] = user.email\r\n                return redirect(\"homepage\")\r\n        else:\r\n            return render(request, \"login.html\", {\"error\": \"Invalid email or password\"})  # Show error message\r\nclass CreateAcct(View):\r\n    def get(self, request):\r\n        form = CreateAccountForm()\r\n        return render(request, \"create_account.html\", {\"form\": form})\r\n\r\n    def post(self, request):\r\n        form = CreateAccountForm(request.POST)\r\n        if form.is_valid():\r\n            user = form.save(commit=False)\r\n            user.role = 'User'\r\n            user.save()\r\n            send_confirmation_email(user)\r\n            return redirect(\"login\")\r\n        else:\r\n            print(f\"Form errors: {form.errors}\")\r\n            return render(request, \"create_account.html\", {\"form\": form})\r\nclass HomePage(View):\r\n    def get(self, request):\r\n        # we are just using this location for now\r\n        m = folium.Map(location=[43.0389, -87.9065], zoom_start=12,\r\n                     tiles=\"cartodbpositron\")\r\n\r\n        marker_cluster = MarkerCluster().add_to(m)\r\n\r\n        # SAMPLE EVENTS! we will use our database for this later\r\n        sample_events = [\r\n            {\r\n                'title': 'Music in the Park',\r\n                'description': 'Live music performance at Veterans Park',\r\n                'latitude': 43.0450,\r\n                'longitude': -87.8900,\r\n                'date': timezone.now() + timezone.timedelta(days=2),\r\n                'category': 'Music'\r\n            },\r\n            {\r\n                'title': 'Food Festival',\r\n                'description': 'Annual food festival with local restaurants',\r\n                'latitude': 43.0381,\r\n                'longitude': -87.9066,\r\n                'date': timezone.now() + timezone.timedelta(days=5),\r\n                'category': 'Food'\r\n            },\r\n            {\r\n                'title': 'Art Exhibition',\r\n                'description': 'Modern art showcase at Milwaukee Art Museum',\r\n                'latitude': 43.0401,\r\n                'longitude': -87.8972,\r\n                'date': timezone.now() + timezone.timedelta(days=3),\r\n                'category': 'Art'\r\n            },\r\n            {\r\n                'title': 'Tech Meetup',\r\n                'description': 'Network with tech professionals in Milwaukee',\r\n                'latitude': 43.0336,\r\n                'longitude': -87.9125,\r\n                'date': timezone.now() + timezone.timedelta(days=7),\r\n                'category': 'Technology'\r\n            }\r\n        ]\r\n\r\n        for event in sample_events:\r\n            event_date = event['date'].strftime('%B %d, %Y at %I:%M %p')\r\n\r\n            popup_html = f\"\"\"\r\n            <div class=\"event-popup\">\r\n                <h3>{event['title']}</h3>\r\n                <p><strong>Date:</strong> {event_date}</p>\r\n                <p><strong>Category:</strong> {event['category']}</p>\r\n                <p>{event['description']}</p>\r\n            </div>\r\n            \"\"\"\r\n\r\n            folium.Marker(\r\n                location=[event['latitude'], event['longitude']],\r\n                popup=folium.Popup(popup_html, max_width=300),\r\n                tooltip=event['title'],\r\n                icon=folium.Icon(icon=\"info-sign\", prefix='fa', color=\"blue\"),\r\n            ).add_to(marker_cluster)\r\n\r\n        # circle for the search radius\r\n        folium.Circle(\r\n            location=[43.0389, -87.9065],\r\n            radius=5000,\r\n            color='#3186cc',\r\n            fill=True,\r\n            fill_color='#3186cc',\r\n            fill_opacity=0.2,\r\n            tooltip=\"5km radius\"\r\n        ).add_to(m)\r\n\r\n        map_html = m._repr_html_()\r\n\r\n        return render(request, \"homepage.html\", {\r\n            'map_html': map_html,\r\n            'sample_events': sample_events\r\n        })\r\n\r\n    def post(self, request):\r\n        location = request.POST.get('location', 'Milwaukee')\r\n        radius = request.POST.get('radius', 5)\r\n\r\n        try:\r\n            radius = int(radius)\r\n        except ValueError:\r\n            radius = 5\r\n\r\n        # rerender the map with new radius, not implemented yet\r\n        return redirect('homepage')\r\n\r\nclass SettingPage(View):\r\n    def get(self, request):\r\n        email = request.session.get(\"email\")\r\n        if not email:\r\n            return redirect(\"login\") #redirect if unauthenticated\r\n\r\n        try:\r\n            user = User.objects.get(email=email)\r\n            return render(request, \"SettingPage.html\", {\"user\": user})\r\n        except User.DoesNotExist:\r\n            request.session.flush()\r\n            return redirect(\"login\")\r\n\r\n    def post(self, request):\r\n        email = request.session.get(\"email\")\r\n        if not email:\r\n            return redirect(\"login\")  #redirect if unauthenticated\r\n\r\n        try:\r\n            user = User.objects.get(email=email)\r\n        except User.DoesNotExist:\r\n            request.session.flush()\r\n            return redirect('login')\r\n\r\n        if \"logout\" in request.POST:\r\n            request.session.flush()\r\n            return redirect('login')  # Redirects to the root URL (login page)\r\n\r\n        success_message = None\r\n        error_message = None\r\n\r\n        if \"update_email\" in request.POST:\r\n            new_email = request.POST.get(\"email\") #clicked on\r\n            if new_email: #user entered something\r\n                result = change_account_details(user, new_email=new_email)\r\n                if result:\r\n                    success_message = \"Your email has been updated successfully\"\r\n                else:\r\n                    error_message = \"Failed to update email\"\r\n\r\n        elif \"update_username\" in request.POST:\r\n            new_username = request.POST.get(\"username\")\r\n            if new_username:\r\n                result = change_account_details(user, new_username=new_username)\r\n                if result:\r\n                    success_message = \"Your username has been updated successfully\"\r\n                else:\r\n                    error_message = \"Failed to update your username\"\r\n\r\n        elif \"update_first_name\" in request.POST:\r\n            new_first_name = request.POST.get(\"first_name\")\r\n            if new_first_name:\r\n                result = change_account_details(user, new_first_name=new_first_name)\r\n                if result:\r\n                    success_message = \"Your first name has been updated successfully\"\r\n                else:\r\n                    error_message = \"Failed to update your first name\"\r\n\r\n        elif \"update_last_name\" in request.POST:\r\n            new_last_name = request.POST.get(\"last_name\")\r\n            if new_last_name:\r\n                result = change_account_details(user, new_last_name=new_last_name)\r\n                if result:\r\n                    success_message = \"Your last name has been updated successfully\"\r\n                else:\r\n                    error_message = \"Failed to update your last name\"\r\n\r\n        if success_message:\r\n            return redirect(\"settings\")\r\n\r\n        return render(request, \"SettingPage.html\", {\r\n            \"user\": user,\r\n            \"success\": success_message,\r\n            \"error\": error_message\r\n        })\r\n\r\n\r\nclass SignOutView(View):\r\n    def post(self, request):\r\n        logout(request)\r\n        request.session.flush()\r\n        return redirect('login')\r\n\r\n\r\n#Override auth_views.PasswordResetView\r\nclass PasswordResetView(View):\r\n\r\n    def get(self, request):\r\n        return render(request, \"password_reset.html\")\r\n\r\n    def post(self, request):\r\n        #put in method where it sends via sendgrid\r\n        from Methods.sendgrid_reset import send_reset_email\r\n        check = Reset()\r\n        email = request.POST.get('email')\r\n\r\n        user = User.objects.filter(email=email).first()\r\n        #check that the email is valid\r\n        if user:\r\n            if check.authenticate(email):\r\n                #then get username\r\n                send_reset_email(request,user)\r\n                #if the email is valid and email is send to user email, go to password_reset_done page\r\n                return redirect(\"password_reset_done\")\r\n            else:\r\n                return render(request, \"password_reset.html\", {\"error\": \"Invalid email\"})\r\n        else:\r\n            return render(request, \"password_reset.html\", {\"error\": \"Invalid email\"})\r\nclass PasswordResetDoneView(View):\r\n    def get(self, request,):\r\n        return render(request, \"password_reset_sent.html\")\r\n\r\nclass PasswordResetConfirmView(View):\r\n\r\n    def get(self, request, uidb64, token):\r\n        token_generator = CustomTokenGenerator()\r\n        try:\r\n            uid = urlsafe_base64_decode(uidb64).decode()\r\n            user = User.objects.get(pk=uid)\r\n        except (User.DoesNotExist, ValueError, TypeError):\r\n            user = None\r\n\r\n        if user and token_generator.check_token(user, token):\r\n            return render(request, \"password_reset_form.html\", {\"valid\": True, \"uidb64\": uidb64, \"token\": token})\r\n        else:\r\n            return render(request, \"password_reset_form.html\", {\"valid\": False, \"error\": \"Invalid or expired token\"})\r\n\r\n    def post(self, request, uidb64, token):\r\n\r\n        try:\r\n            uid = urlsafe_base64_decode(uidb64).decode()\r\n            user = User.objects.get(pk=uid)\r\n        except (User.DoesNotExist, ValueError, TypeError):\r\n            user = None\r\n\r\n        errors = {}\r\n        check = Reset()\r\n\r\n        password1 = request.POST.get('password1')\r\n        password2 = request.POST.get('password2')\r\n\r\n        if user:\r\n            # Check if the password meets the length requirements\r\n            if check.pass_maximum(password1):\r\n                # Check if the two passwords match\r\n                if check.pass_exact(password1, password2):\r\n                    check.set_password(user.email, password1)\r\n                    return redirect(\"password_reset_complete\")\r\n                else:\r\n                    errors[\"match\"] = \"Passwords don't match\"\r\n            else:\r\n                errors[\"char\"] = \"Password must be more than 0 characters but less than 51 characters\"\r\n        else:\r\n            # Return error if the token is invalid or expired\r\n            errors[\"token\"] = [\"Invalid or expired token\"]\r\n\r\n            # Render error messages\r\n        return render(request, \"password_reset_form.html\", {\"errors\": errors, \"user_data\": request.POST})\r\n\r\nclass WeatherView(View):\r\n        def get(self, request):\r\n            # Render the weather form template for GET requests\r\n            return render(request, \"weather.html\")\r\n\r\n        def post(self, request):\r\n            api_key = '438802557a5074e655e46b4140076665'  # Consider moving this to settings.py for better security\r\n            location_type = request.POST.get('locationType')\r\n            location_input = request.POST.get('locationInput').strip()\r\n\r\n            if not location_input:\r\n                return render(request, \"weather.html\", {'error': 'Please enter a location.'})\r\n\r\n            api_url = f'https://api.openweathermap.org/data/2.5/forecast?appid={api_key}&units=metric'\r\n\r\n            try:\r\n                if location_type == 'city':\r\n                    api_url += f'&q={location_input}'\r\n                elif location_type == 'zip':\r\n                    if not location_input.isdigit() or len(location_input) != 5:\r\n                        return render(request, \"weather.html\", {'error': 'Invalid zip code format.'})\r\n                    api_url += f'&zip={location_input}'\r\n                elif location_type == 'coords':\r\n                    lat, lon = map(str.strip, location_input.split(','))\r\n                    if not (lat.replace('.', '').isdigit() and lon.replace('.', '').isdigit()):\r\n                        return render(request, \"weather.html\", {'error': 'Invalid coordinates format.'})\r\n                    api_url += f'&lat={lat}&lon={lon}'\r\n                else:\r\n                    return render(request, \"weather.html\", {'error': 'Invalid location type.'})\r\n\r\n                response = requests.get(api_url)\r\n\r\n                # Check for a 404 response and return a friendly error message\r\n                if response.status_code == 404:\r\n                    return render(request, \"weather.html\", {'error': 'Location not found. Please check your spelling.'})\r\n\r\n                response.raise_for_status()  # Raise an exception for other HTTP errors\r\n                weather_data = response.json()\r\n                return render(request, \"weather.html\", {'weather_data': weather_data})\r\n\r\n            except requests.exceptions.RequestException as e:\r\n                return render(request, \"weather.html\", {'error': f'Failed to fetch weather data: {str(e)}'})\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/polls/views.py b/polls/views.py
--- a/polls/views.py	(revision d7c057e8129bd116bb546c7379b3afa52ca008e4)
+++ b/polls/views.py	(date 1741908090409)
@@ -6,10 +6,11 @@
 
 # Create your views here.
 from django.shortcuts import render, redirect
+from django.utils.decorators import method_decorator
 from django.views import View
 from django.core.exceptions import ValidationError
 from django.utils import timezone
-
+from django.views.decorators.cache import never_cache
 
 from Methods.Login import Login
 from Methods.forms import CreateAccountForm
@@ -35,15 +36,25 @@
 from Methods.sendgrid_email import send_confirmation_email
 from django.contrib.auth import logout
 
+#For map
 import folium
 from folium.plugins import MarkerCluster
+#import geopy
+import geopy
+from geopy.geocoders import Nominatim
 
 # Create your views here.
 class LoginAuth(View):
-
+    @method_decorator(never_cache)
     def get(self, request):
-        request.session.pop('id', None)  # Remove user ID from session
-        return render(request, "login.html")
+        if 'email' in request.session:
+            return redirect("homepage")
+        response = render(request, "login.html")
+        #https://stackoverflow.com/questions/49547/how-do-we-control-web-page-caching-across-all-browsers#:~:text=Using%20Python/Django:,=%20%220%22%20%23%20Proxies.
+        response['Cache-Control'] = 'no-store, no-cache, must-revalidate, max-age=0'
+        response['Pragma'] = 'no-cache'
+        response['Expires'] = '0'
+        return response
 
     def post(self, request):
         email = request.POST.get('email')
@@ -80,9 +91,15 @@
             return render(request, "create_account.html", {"form": form})
 class HomePage(View):
     def get(self, request):
-        # we are just using this location for now
-        m = folium.Map(location=[43.0389, -87.9065], zoom_start=12,
-                     tiles="cartodbpositron")
+
+        #If no location given, show default map (North America)
+        #m = folium.Map(location=[39.7837304, -100.445882], zoom_start=4, tiles="cartodbpositron")
+        m = folium.Map(location=[43.0389, -87.9065], zoom_start=12, tiles="cartodbpositron")
+
+        folium.Marker(
+            location=[43.0389, -87.9065],
+            icon=folium.Icon(icon="info-sign", prefix='fa', color="red"),
+        ).add_to(m)
 
         marker_cluster = MarkerCluster().add_to(m)
 
@@ -160,7 +177,42 @@
         })
 
     def post(self, request):
-        location = request.POST.get('location', 'Milwaukee')
+        errors = {}
+        # we get the post request and then m is that location based on the csv of cities in america
+        # Default location (America)
+        default_lat=39.7837304
+        default_long=-100.445882
+        default_zoom=4
+        lat, long, zoom = default_lat, default_long, default_zoom
+
+        location=None
+        street = request.POST.get('street', '')
+        city = request.POST.get('city', '')
+        state = request.POST.get('state', '')
+
+        address = f"{street}, {city}, {state}, United States".strip(", ")
+
+        #debugging
+        print(f"Address: '{address}'")
+
+        geolocator = Nominatim(user_agent="eventMap")
+
+        try:
+            location = geolocator.geocode(address, timeout=10)
+            if location:
+                lat, long, zoom = location.latitude, location.longitude, 12
+                print(f"Geocoded Location: {lat}, {long}")
+            else:
+                lat,long,zoom=default_lat, default_long, default_zoom #default location
+                errors["address"] = "Location not found"
+                print("Geocoder returned None, using default location.")
+        except Exception as e:
+            errors["address"] = "Location not found"
+            lat, long = default_lat, default_long
+            print(f"Geolocation Error: {str(e)}")  # Debugging output
+
+        m = folium.Map(location=[lat, long], zoom_start=zoom, tiles="cartodbpositron")
+
         radius = request.POST.get('radius', 5)
 
         try:
@@ -168,8 +220,33 @@
         except ValueError:
             radius = 5
 
+        folium.Circle(
+            location=[lat, long],
+            radius=5000,
+            color='#3186cc',
+            fill=True,
+            fill_color='#3186cc',
+            fill_opacity=0.2,
+            tooltip="5km radius"
+        ).add_to(m)
+
+        marker_cluster = MarkerCluster().add_to(m)
+
+        folium.Marker(
+            location=[lat, long],
+            icon=folium.Icon(icon="info-sign", prefix='fa', color="red"),
+        ).add_to(marker_cluster)
+
+        map_html = m._repr_html_()
         # rerender the map with new radius, not implemented yet
-        return redirect('homepage')
+        return render(request, "homepage.html", {
+            'map_html': map_html,
+            'street': street,
+            'city': city,
+            'state': state,
+            'radius': radius,
+            'errors': errors
+        })
 
 class SettingPage(View):
     def get(self, request):
Index: Templates/homepage.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><!--Written by Jonny-->\r\n{% load static %}\r\n<!DOCTYPE html>\r\n\r\n<html>\r\n    <head>\r\n        <meta charset=\"utf-8\">\r\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n        <title>Event Radar - Home</title>\r\n        <meta name=\"description\" content=\"Find events near you with Event Radar\">\r\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n        <link rel=\"stylesheet\" href=\"{% static 'css/styles.css' %}\">\r\n        <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css\">\r\n        <style>\r\n            .event-popup h3 {\r\n                color: #6c5ce7;\r\n                margin-bottom: 8px;\r\n            }\r\n            .event-popup p {\r\n                margin: 5px 0;\r\n            }\r\n        </style>\r\n    </head>\r\n    <body class=\"homepage-body\">\r\n        <div class=\"top-navbar\">\r\n            <div class=\"logo-container\">\r\n                <img id=\"logo\" src=\"/static/media/eventradar_logo2.png\" alt=\"Event Radar Logo\">\r\n            </div>\r\n            <div class=\"nav-actions\">\r\n                <a href=\"{% url 'weather' %}\" class=\"settings-btn\">\r\n                    <i class=\"fas fa-cloud\"></i> Weather\r\n                </a>\r\n                <a href=\"{% url 'settings' %}\" class=\"settings-btn\">\r\n                    <i class=\"fas fa-cog\"></i> Settings\r\n                </a>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"main-content\">\r\n            <div class=\"search-controls\">\r\n                <form method=\"post\" action=\"{% url 'homepage' %}\">\r\n                    {% csrf_token %}\r\n                    <div class=\"search-bar\">\r\n                        <div class=\"input-group\">\r\n                            <span class=\"input-icon\"><i class=\"fas fa-map-marker-alt\"></i></span>\r\n                            <input type=\"text\" name=\"location\" placeholder=\"Location\" value=\"Milwaukee\">\r\n                        </div>\r\n\r\n                        <div class=\"input-group\">\r\n                            <span class=\"input-icon\"><i class=\"fas fa-circle-notch\"></i></span>\r\n                            <input type=\"number\" name=\"radius\" placeholder=\"Radius (km)\" value=\"5\" min=\"1\" max=\"50\">\r\n                        </div>\r\n\r\n                        <button type=\"submit\" class=\"search-btn\">\r\n                            <i class=\"fas fa-search\"></i> Search\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n\r\n            <div class=\"content-container\">\r\n                <div class=\"map-container\">\r\n                    <!-- this is the map -->\r\n                    {{ map_html|safe }}\r\n                </div>\r\n\r\n                <div class=\"events-list\">\r\n                    <h2>Events Near You</h2>\r\n\r\n                    {% for event in sample_events %}\r\n                    <div class=\"event-card\">\r\n                        <div class=\"event-header\">\r\n                            <h3>{{ event.title }}</h3>\r\n                            <span class=\"event-category\">{{ event.category }}</span>\r\n                        </div>\r\n                        <p class=\"event-date\">{{ event.date|date:\"F j, Y\" }} at {{ event.date|date:\"g:i A\" }}</p>\r\n                        <p class=\"event-description\">{{ event.description }}</p>\r\n                        <a href=\"#\" class=\"event-details-btn\">View Details</a>\r\n                    </div>\r\n                    {% endfor %}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </body>\r\n</html>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Templates/homepage.html b/Templates/homepage.html
--- a/Templates/homepage.html	(revision d7c057e8129bd116bb546c7379b3afa52ca008e4)
+++ b/Templates/homepage.html	(date 1741906381871)
@@ -43,7 +43,61 @@
                     <div class="search-bar">
                         <div class="input-group">
                             <span class="input-icon"><i class="fas fa-map-marker-alt"></i></span>
-                            <input type="text" name="location" placeholder="Location" value="Milwaukee">
+                            <input type="text" name="street" placeholder="Street">
+                            <input type="text" name="city" placeholder="City">
+                            <select name="state" id="state">
+                                <option value="" disabled selected>Select a State</option>
+                                <option value="AL">Alabama</option>
+                                <option value="AK">Alaska</option>
+                                <option value="AZ">Arizona</option>
+                                <option value="AR">Arkansas</option>
+                                <option value="CA">California</option>
+                                <option value="CO">Colorado</option>
+                                <option value="CT">Connecticut</option>
+                                <option value="DE">Delaware</option>
+                                <option value="FL">Florida</option>
+                                <option value="GA">Georgia</option>
+                                <option value="HI">Hawaii</option>
+                                <option value="ID">Idaho</option>
+                                <option value="IL">Illinois</option>
+                                <option value="IN">Indiana</option>
+                                <option value="IA">Iowa</option>
+                                <option value="KS">Kansas</option>
+                                <option value="KY">Kentucky</option>
+                                <option value="LA">Louisiana</option>
+                                <option value="ME">Maine</option>
+                                <option value="MD">Maryland</option>
+                                <option value="MA">Massachusetts</option>
+                                <option value="MI">Michigan</option>
+                                <option value="MN">Minnesota</option>
+                                <option value="MS">Mississippi</option>
+                                <option value="MO">Missouri</option>
+                                <option value="MT">Montana</option>
+                                <option value="NE">Nebraska</option>
+                                <option value="NV">Nevada</option>
+                                <option value="NH">New Hampshire</option>
+                                <option value="NJ">New Jersey</option>
+                                <option value="NM">New Mexico</option>
+                                <option value="NY">New York</option>
+                                <option value="NC">North Carolina</option>
+                                <option value="ND">North Dakota</option>
+                                <option value="OH">Ohio</option>
+                                <option value="OK">Oklahoma</option>
+                                <option value="OR">Oregon</option>
+                                <option value="PA">Pennsylvania</option>
+                                <option value="RI">Rhode Island</option>
+                                <option value="SC">South Carolina</option>
+                                <option value="SD">South Dakota</option>
+                                <option value="TN">Tennessee</option>
+                                <option value="TX">Texas</option>
+                                <option value="UT">Utah</option>
+                                <option value="VT">Vermont</option>
+                                <option value="VA">Virginia</option>
+                                <option value="WA">Washington</option>
+                                <option value="WV">West Virginia</option>
+                                <option value="WI">Wisconsin</option>
+                                <option value="WY">Wyoming</option>
+                            </select>
                         </div>
 
                         <div class="input-group">
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"e8e0712f-9f06-49b7-a40c-f49ee55d611b\" name=\"Changes\" comment=\"Redone the views and added proper notes to unit tests\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/EventRadarProject/urls.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/EventRadarProject/urls.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/db.sqlite3\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/db.sqlite3\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/polls/views.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/polls/views.py\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"main\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"Django Server.Unnamed.executor\": \"Run\",\r\n    \"Django tests.Test: polls.tests.acceptance_tests.test_acceptance_reset.executor\": \"Run\",\r\n    \"Django tests.Test: polls.tests.unit_tests.test_unit_reset.TestLogin.test_correct_email.executor\": \"Run\",\r\n    \"Django tests.Test: polls.tests.unit_tests.test_unit_reset.TestLogin.test_email_find.executor\": \"Run\",\r\n    \"Django tests.Test: polls.tests.unit_tests.test_unit_reset.TestLogin.test_email_not_blank.executor\": \"Run\",\r\n    \"Django tests.Test: polls.tests.unit_tests.test_unit_reset.TestLogin.test_set_password.executor\": \"Run\",\r\n    \"Django tests.Test: polls.tests.unit_tests.test_unit_reset.executor\": \"Run\",\r\n    \"RunOnceActivity.OpenDjangoStructureViewOnStart\": \"true\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"RunOnceActivity.git.unshallow\": \"true\",\r\n    \"SHARE_PROJECT_CONFIGURATION_FILES\": \"true\",\r\n    \"git-widget-placeholder\": \"feature/weather\",\r\n    \"node.js.detected.package.eslint\": \"true\",\r\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\r\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\r\n    \"nodejs_package_manager_path\": \"npm\",\r\n    \"vue.rearranger.settings.migration\": \"true\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RunManager\" selected=\"Django Server.Unnamed\">\r\n    <configuration name=\"Test: polls.tests.acceptance_tests.test_acceptance_reset\" type=\"DjangoTestsConfigurationType\" temporary=\"true\">\r\n      <module name=\"EventRadarProject\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"TARGET\" value=\"polls.tests.acceptance_tests.test_acceptance_reset\" />\r\n      <option name=\"SETTINGS_FILE\" value=\"\" />\r\n      <option name=\"CUSTOM_SETTINGS\" value=\"false\" />\r\n      <option name=\"USE_OPTIONS\" value=\"false\" />\r\n      <option name=\"OPTIONS\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"Test: polls.tests.unit_tests.test_unit_reset\" type=\"DjangoTestsConfigurationType\" temporary=\"true\">\r\n      <module name=\"EventRadarProject\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"TARGET\" value=\"polls.tests.unit_tests.test_unit_reset\" />\r\n      <option name=\"SETTINGS_FILE\" value=\"\" />\r\n      <option name=\"CUSTOM_SETTINGS\" value=\"false\" />\r\n      <option name=\"USE_OPTIONS\" value=\"false\" />\r\n      <option name=\"OPTIONS\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"Test: polls.tests.unit_tests.test_unit_reset.TestLogin.test_correct_email\" type=\"DjangoTestsConfigurationType\" temporary=\"true\">\r\n      <module name=\"EventRadarProject\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"TARGET\" value=\"polls.tests.unit_tests.test_unit_reset.TestLogin.test_correct_email\" />\r\n      <option name=\"SETTINGS_FILE\" value=\"\" />\r\n      <option name=\"CUSTOM_SETTINGS\" value=\"false\" />\r\n      <option name=\"USE_OPTIONS\" value=\"false\" />\r\n      <option name=\"OPTIONS\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"Test: polls.tests.unit_tests.test_unit_reset.TestLogin.test_email_not_blank\" type=\"DjangoTestsConfigurationType\" temporary=\"true\">\r\n      <module name=\"EventRadarProject\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"TARGET\" value=\"polls.tests.unit_tests.test_unit_reset.TestLogin.test_email_not_blank\" />\r\n      <option name=\"SETTINGS_FILE\" value=\"\" />\r\n      <option name=\"CUSTOM_SETTINGS\" value=\"false\" />\r\n      <option name=\"USE_OPTIONS\" value=\"false\" />\r\n      <option name=\"OPTIONS\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"Test: polls.tests.unit_tests.test_unit_reset.TestLogin.test_set_password\" type=\"DjangoTestsConfigurationType\" temporary=\"true\">\r\n      <module name=\"EventRadarProject\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"TARGET\" value=\"polls.tests.unit_tests.test_unit_reset.TestLogin.test_set_password\" />\r\n      <option name=\"SETTINGS_FILE\" value=\"\" />\r\n      <option name=\"CUSTOM_SETTINGS\" value=\"false\" />\r\n      <option name=\"USE_OPTIONS\" value=\"false\" />\r\n      <option name=\"OPTIONS\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"Unnamed\" type=\"Python.DjangoServer\" factoryName=\"Django server\">\r\n      <module name=\"EventRadarProject\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n        <env name=\"DJANGO_SETTINGS_MODULE\" value=\"EventRadarProject.settings\" />\r\n        <env name=\"export DJANGO_SETTINGS_MODULE\" value=\"EventRadarProject1.settings\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"SDK_NAME\" value=\"Python 3.12 (EventRadarProject1)\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"net.ashald.envfile\">\r\n        <option name=\"IS_ENABLED\" value=\"false\" />\r\n        <option name=\"IS_SUBST\" value=\"false\" />\r\n        <option name=\"IS_PATH_MACRO_SUPPORTED\" value=\"false\" />\r\n        <option name=\"IS_IGNORE_MISSING_FILES\" value=\"false\" />\r\n        <option name=\"IS_ENABLE_EXPERIMENTAL_INTEGRATIONS\" value=\"false\" />\r\n        <ENTRIES>\r\n          <ENTRY IS_ENABLED=\"true\" PARSER=\"runconfig\" IS_EXECUTABLE=\"false\" />\r\n        </ENTRIES>\r\n      </EXTENSION>\r\n      <option name=\"launchJavascriptDebuger\" value=\"false\" />\r\n      <option name=\"port\" value=\"8000\" />\r\n      <option name=\"host\" value=\"\" />\r\n      <option name=\"additionalOptions\" value=\"\" />\r\n      <option name=\"browserUrl\" value=\"\" />\r\n      <option name=\"runTestServer\" value=\"false\" />\r\n      <option name=\"runNoReload\" value=\"false\" />\r\n      <option name=\"useCustomRunCommand\" value=\"false\" />\r\n      <option name=\"customRunCommand\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <list>\r\n      <item itemvalue=\"Django Server.Unnamed\" />\r\n      <item itemvalue=\"Django tests.Test: polls.tests.acceptance_tests.test_acceptance_reset\" />\r\n      <item itemvalue=\"Django tests.Test: polls.tests.unit_tests.test_unit_reset.TestLogin.test_correct_email\" />\r\n      <item itemvalue=\"Django tests.Test: polls.tests.unit_tests.test_unit_reset.TestLogin.test_email_not_blank\" />\r\n      <item itemvalue=\"Django tests.Test: polls.tests.unit_tests.test_unit_reset.TestLogin.test_set_password\" />\r\n      <item itemvalue=\"Django tests.Test: polls.tests.unit_tests.test_unit_reset\" />\r\n    </list>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Django tests.Test: polls.tests.unit_tests.test_unit_reset\" />\r\n        <item itemvalue=\"Django tests.Test: polls.tests.unit_tests.test_unit_reset.TestLogin.test_set_password\" />\r\n        <item itemvalue=\"Django tests.Test: polls.tests.unit_tests.test_unit_reset.TestLogin.test_email_not_blank\" />\r\n        <item itemvalue=\"Django tests.Test: polls.tests.unit_tests.test_unit_reset.TestLogin.test_correct_email\" />\r\n        <item itemvalue=\"Django tests.Test: polls.tests.acceptance_tests.test_acceptance_reset\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-js-predefined-d6986cc7102b-822845ee3bb5-JavaScript-PY-243.23654.177\" />\r\n        <option value=\"bundled-python-sdk-91d3a02ef49d-43b77aa2d136-com.jetbrains.pycharm.pro.sharedIndexes.bundled-PY-243.23654.177\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task id=\"LOCAL-00001\" summary=\"redid password_reset.html and changing acceptance tests\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1740706768890</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1740706768890</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"redid views and made new file for customtokengenerator\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1740707762786</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1740707762786</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"Redone the views and added proper notes to unit tests\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1740720999803</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1740720999803</updated>\r\n    </task>\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"e8e0712f-9f06-49b7-a40c-f49ee55d611b\" name=\"Changes\" comment=\"Redone the views and added proper notes to unit tests\" />\r\n      <created>1740721531828</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1740721531828</updated>\r\n      <workItem from=\"1740721532462\" duration=\"226000\" />\r\n      <workItem from=\"1740721785792\" duration=\"133000\" />\r\n      <workItem from=\"1740721921456\" duration=\"240000\" />\r\n      <workItem from=\"1740722163921\" duration=\"26000\" />\r\n      <workItem from=\"1740725985306\" duration=\"826000\" />\r\n      <workItem from=\"1740726815716\" duration=\"1904000\" />\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"4\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"redid reset.py\" />\r\n    <MESSAGE value=\"redid password_reset.html and changing acceptance tests\" />\r\n    <MESSAGE value=\"redid views and made new file for customtokengenerator\" />\r\n    <MESSAGE value=\"Redone the views and added proper notes to unit tests\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Redone the views and added proper notes to unit tests\" />\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <breakpoint-manager>\r\n      <breakpoints>\r\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"python-line\">\r\n          <url>file://$PROJECT_DIR$/polls/tests/unit_tests/test_unit_reset.py</url>\r\n          <option name=\"timeStamp\" value=\"4\" />\r\n        </line-breakpoint>\r\n      </breakpoints>\r\n    </breakpoint-manager>\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/EventRadarProject$Test__polls_tests_unit_tests_test_unit_reset_TestLogin_test_correct_email.coverage\" NAME=\"Test: polls.tests.unit_tests.test_unit_reset.TestLogin.test_correct_email Coverage Results\" MODIFIED=\"1740709830853\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"\" />\r\n    <SUITE FILE_PATH=\"coverage/EventRadarProject$Test__polls_tests_acceptance_tests.coverage\" NAME=\"Test: polls.tests.acceptance_tests Coverage Results\" MODIFIED=\"1740157793993\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"\" />\r\n    <SUITE FILE_PATH=\"coverage/EventRadarProject$settings.coverage\" NAME=\"settings Coverage Results\" MODIFIED=\"1738890242422\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/EventRadarProject\" />\r\n    <SUITE FILE_PATH=\"coverage/EventRadarProject$Test__acceptance_tests_login_accttest.coverage\" NAME=\"Test: acceptance_tests.login_accttest Coverage Results\" MODIFIED=\"1738950572880\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"\" />\r\n    <SUITE FILE_PATH=\"coverage/EventRadarProject$urls.coverage\" NAME=\"urls Coverage Results\" MODIFIED=\"1738884262034\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/EventRadarProject\" />\r\n    <SUITE FILE_PATH=\"coverage/EventRadarProject$Test__polls_tests_unit_tests_test_unit_login.coverage\" NAME=\"Test: polls.tests.unit_tests.test_unit_login Coverage Results\" MODIFIED=\"1740157615241\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"\" />\r\n    <SUITE FILE_PATH=\"coverage/EventRadarProject$manage.coverage\" NAME=\"manage Coverage Results\" MODIFIED=\"1738904556915\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n    <SUITE FILE_PATH=\"coverage/EventRadarProject$Test__EventRadarProject.coverage\" NAME=\"Test: EventRadarProject Coverage Results\" MODIFIED=\"1740130910564\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"\" />\r\n    <SUITE FILE_PATH=\"coverage/EventRadarProject$Test__polls_login_accttest.coverage\" NAME=\"Test: polls.login_accttest Coverage Results\" MODIFIED=\"1738901068975\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"\" />\r\n    <SUITE FILE_PATH=\"coverage/EventRadarProject$Test__polls_tests_unit_tests_test_unit_sign_out.coverage\" NAME=\"Test: polls.tests.unit_tests.test_unit_sign_out Coverage Results\" MODIFIED=\"1740525865052\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"\" />\r\n    <SUITE FILE_PATH=\"coverage/EventRadarProject$Test__polls_tests_acceptance_tests_test_acceptance_change_account_details.coverage\" NAME=\"Test: polls.tests.acceptance_tests.test_acceptance_change_account_details Coverage Results\" MODIFIED=\"1740525844888\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"\" />\r\n    <SUITE FILE_PATH=\"coverage/EventRadarProject$Test__polls_tests_acceptance_tests_test_acceptance_reset_ResetAcceptanceTests.coverage\" NAME=\"Test: polls.tests.acceptance_tests.test_acceptance_reset.ResetAcceptanceTests Coverage Results\" MODIFIED=\"1740116140386\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"\" />\r\n    <SUITE FILE_PATH=\"coverage/EventRadarProject$Test__polls_tests_unit_tests_test_unit_reset_TestLogin_test_email_not_blank.coverage\" NAME=\"Test: polls.tests.unit_tests.test_unit_reset.TestLogin.test_email_not_blank Coverage Results\" MODIFIED=\"1740709834257\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"\" />\r\n    <SUITE FILE_PATH=\"coverage/EventRadarProject$Login.coverage\" NAME=\"Login Coverage Results\" MODIFIED=\"1738929846759\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/Methods\" />\r\n    <SUITE FILE_PATH=\"coverage/EventRadarProject$Test__polls_tests_acceptance_tests_test_acceptance_login.coverage\" NAME=\"Test: polls.tests.acceptance_tests.test_acceptance_login Coverage Results\" MODIFIED=\"1740157601080\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"\" />\r\n    <SUITE FILE_PATH=\"coverage/EventRadarProject$Test__polls_tests_unit_tests_test_unit_confirm_email.coverage\" NAME=\"Test: polls.tests.unit_tests.test_unit_confirm_email Coverage Results\" MODIFIED=\"1740157610562\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"\" />\r\n    <SUITE FILE_PATH=\"coverage/EventRadarProject$Test__polls_tests_unit_tests_test_unit_reset.coverage\" NAME=\"Test: polls.tests.unit_tests.test_unit_reset Coverage Results\" MODIFIED=\"1740710309062\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"\" />\r\n    <SUITE FILE_PATH=\"coverage/EventRadarProject$Test__unit_tests_login_tests.coverage\" NAME=\"Test: unit_tests.login_tests Coverage Results\" MODIFIED=\"1738935163142\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"\" />\r\n    <SUITE FILE_PATH=\"coverage/EventRadarProject$Test__polls_tests_SignOutTests.coverage\" NAME=\"Test: polls.tests.SignOutTests Coverage Results\" MODIFIED=\"1738897198024\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"\" />\r\n    <SUITE FILE_PATH=\"coverage/EventRadarProject$Test__acceptance_tests_create_test.coverage\" NAME=\"Test: acceptance_tests.create_test Coverage Results\" MODIFIED=\"1738935183497\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"\" />\r\n    <SUITE FILE_PATH=\"coverage/EventRadarProject$Test__polls_tests_acceptance_tests_test_acceptance_create_account.coverage\" NAME=\"Test: polls.tests.acceptance_tests.test_acceptance_create_account Coverage Results\" MODIFIED=\"1740157598246\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"\" />\r\n    <SUITE FILE_PATH=\"coverage/EventRadarProject$Test__polls_tests_CreateAccountTests.coverage\" NAME=\"Test: polls.tests.CreateAccountTests Coverage Results\" MODIFIED=\"1738896882620\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"\" />\r\n    <SUITE FILE_PATH=\"coverage/EventRadarProject$views.coverage\" NAME=\"views Coverage Results\" MODIFIED=\"1740705481218\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/polls\" />\r\n    <SUITE FILE_PATH=\"coverage/EventRadarProject$Test__.coverage\" NAME=\"Test:  Coverage Results\" MODIFIED=\"1738904573026\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"\" />\r\n    <SUITE FILE_PATH=\"coverage/EventRadarProject$Test__polls_tests_unit_tests_test_unit_reset_TestLogin_test_email_find.coverage\" NAME=\"Test: polls.tests.unit_tests.test_unit_reset.TestLogin.test_email_find Coverage Results\" MODIFIED=\"1740709817898\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"\" />\r\n    <SUITE FILE_PATH=\"coverage/EventRadarProject$Test__polls_tests_acceptance_tests_test_acceptance_reset.coverage\" NAME=\"Test: polls.tests.acceptance_tests.test_acceptance_reset Coverage Results\" MODIFIED=\"1740710302358\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"\" />\r\n    <SUITE FILE_PATH=\"coverage/EventRadarProject$Test__polls_tests_unit_tests_test_unit_create_account.coverage\" NAME=\"Test: polls.tests.unit_tests.test_unit_create_account Coverage Results\" MODIFIED=\"1740157612743\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"\" />\r\n    <SUITE FILE_PATH=\"coverage/EventRadarProject$Test__unit_tests.coverage\" NAME=\"Test: unit_tests Coverage Results\" MODIFIED=\"1740083061137\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"\" />\r\n    <SUITE FILE_PATH=\"coverage/EventRadarProject$.coverage\" NAME=\" Coverage Results\" MODIFIED=\"1738930041171\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/unit_tests\" />\r\n    <SUITE FILE_PATH=\"coverage/EventRadarProject$Test__unit_tests_create_tests.coverage\" NAME=\"Test: unit_tests.create_tests Coverage Results\" MODIFIED=\"1738935171385\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"\" />\r\n    <SUITE FILE_PATH=\"coverage/EventRadarProject$Test__polls_tests_unit_tests_test_unit_reset_TestLogin_test_set_password.coverage\" NAME=\"Test: polls.tests.unit_tests.test_unit_reset.TestLogin.test_set_password Coverage Results\" MODIFIED=\"1740710290030\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"\" />\r\n    <SUITE FILE_PATH=\"coverage/EventRadarProject$Test__polls_tests_unit_tests_test_unit_change_account_details.coverage\" NAME=\"Test: polls.tests.unit_tests.test_unit_change_account_details Coverage Results\" MODIFIED=\"1740525850229\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"\" />\r\n    <SUITE FILE_PATH=\"coverage/EventRadarProject$Test__polls_tests_acceptance_tests_test_acceptance_confirm_email.coverage\" NAME=\"Test: polls.tests.acceptance_tests.test_acceptance_confirm_email Coverage Results\" MODIFIED=\"1740157595599\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"\" />\r\n    <SUITE FILE_PATH=\"coverage/EventRadarProject$Test__polls_tests_unit_tests.coverage\" NAME=\"Test: polls.tests.unit_tests Coverage Results\" MODIFIED=\"1740157800032\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision d7c057e8129bd116bb546c7379b3afa52ca008e4)
+++ b/.idea/workspace.xml	(date 1741903527820)
@@ -6,8 +6,7 @@
   <component name="ChangeListManager">
     <list default="true" id="e8e0712f-9f06-49b7-a40c-f49ee55d611b" name="Changes" comment="Redone the views and added proper notes to unit tests">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/EventRadarProject/urls.py" beforeDir="false" afterPath="$PROJECT_DIR$/EventRadarProject/urls.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/db.sqlite3" beforeDir="false" afterPath="$PROJECT_DIR$/db.sqlite3" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Templates/homepage.html" beforeDir="false" afterPath="$PROJECT_DIR$/Templates/homepage.html" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/polls/views.py" beforeDir="false" afterPath="$PROJECT_DIR$/polls/views.py" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
@@ -25,7 +24,7 @@
   <component name="Git.Settings">
     <option name="RECENT_BRANCH_BY_REPOSITORY">
       <map>
-        <entry key="$PROJECT_DIR$" value="main" />
+        <entry key="$PROJECT_DIR$" value="vang_logout" />
       </map>
     </option>
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
@@ -48,7 +47,7 @@
     "RunOnceActivity.ShowReadmeOnStart": "true",
     "RunOnceActivity.git.unshallow": "true",
     "SHARE_PROJECT_CONFIGURATION_FILES": "true",
-    "git-widget-placeholder": "feature/weather",
+    "git-widget-placeholder": "vang__add__locations",
     "node.js.detected.package.eslint": "true",
     "node.js.selected.package.eslint": "(autodetect)",
     "node.js.selected.package.tslint": "(autodetect)",
@@ -173,7 +172,6 @@
         <env name="export DJANGO_SETTINGS_MODULE" value="EventRadarProject1.settings" />
       </envs>
       <option name="SDK_HOME" value="" />
-      <option name="SDK_NAME" value="Python 3.12 (EventRadarProject1)" />
       <option name="WORKING_DIRECTORY" value="" />
       <option name="IS_MODULE_SDK" value="false" />
       <option name="ADD_CONTENT_ROOTS" value="true" />
