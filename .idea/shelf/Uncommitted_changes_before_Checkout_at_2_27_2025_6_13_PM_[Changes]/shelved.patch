Index: polls/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.core.validators import EmailValidator\r\nfrom django.contrib.auth.views import logout_then_login\r\nfrom django.shortcuts import render\r\nfrom django.contrib import messages\r\n\r\n# Create your views here.\r\nfrom django.shortcuts import render, redirect\r\nfrom django.views import View\r\nfrom django.core.exceptions import ValidationError\r\nfrom django.utils import timezone\r\n\r\n\r\nfrom Methods.Login import Login\r\nfrom Methods.forms import CreateAccountForm\r\nfrom polls.models import User, Event\r\nfrom Methods.sendgrid_reset import CustomTokenGenerator\r\nfrom polls.models import User\r\nimport re\r\n\r\n#For resetting password\r\nfrom django.contrib.auth import views as auth_views\r\nfrom django.shortcuts import render\r\nfrom Methods.reset import Reset\r\nfrom django.utils.http import urlsafe_base64_decode\r\nfrom django.contrib.auth.tokens import default_token_generator\r\n\r\n\r\nfrom Methods.change_account_details import change_account_details\r\nfrom django.shortcuts import get_object_or_404\r\n\r\n\r\nfrom Methods.sendgrid_email import send_confirmation_email\r\nfrom django.contrib.auth import logout\r\n\r\nimport folium\r\nfrom folium.plugins import MarkerCluster\r\n\r\n# Create your views here.\r\nclass LoginAuth(View):\r\n\r\n    def get(self, request):\r\n        request.session.pop('id', None)  # Remove user ID from session\r\n        return render(request, \"login.html\")\r\n\r\n    def post(self, request):\r\n        email = request.POST.get('email')\r\n        password = request.POST.get('password')\r\n\r\n        # Initialize errors dictionary\r\n        errors = {}\r\n\r\n        login = Login()\r\n        # Check if fields are blank\r\n        if not login.isNotBlank(email, password):\r\n            return render(request, \"login.html\", {\"error\": \"Invalid email or password\"})\r\n        elif login.authenticate(email, password):\r\n                user = User.objects.get(email=email)\r\n                request.session['email'] = user.email\r\n                return redirect(\"homepage\")\r\n        else:\r\n            return render(request, \"login.html\", {\"error\": \"Invalid email or password\"})  # Show error message\r\nclass CreateAcct(View):\r\n    def get(self, request):\r\n        form = CreateAccountForm()\r\n        return render(request, \"create_account.html\", {\"form\": form})\r\n\r\n    def post(self, request):\r\n        form = CreateAccountForm(request.POST)\r\n        if form.is_valid():\r\n            user = form.save(commit=False)\r\n            user.role = 'User'\r\n            user.save()\r\n            send_confirmation_email(user)\r\n            return redirect(\"login\")\r\n        else:\r\n            print(f\"Form errors: {form.errors}\")\r\n            return render(request, \"create_account.html\", {\"form\": form})\r\nclass HomePage(View):\r\n    def get(self, request):\r\n        # we are just using this location for now\r\n        m = folium.Map(location=[43.0389, -87.9065], zoom_start=12,\r\n                     tiles=\"cartodbpositron\")\r\n\r\n        marker_cluster = MarkerCluster().add_to(m)\r\n\r\n        # SAMPLE EVENTS! we will use our database for this later\r\n        sample_events = [\r\n            {\r\n                'title': 'Music in the Park',\r\n                'description': 'Live music performance at Veterans Park',\r\n                'latitude': 43.0450,\r\n                'longitude': -87.8900,\r\n                'date': timezone.now() + timezone.timedelta(days=2),\r\n                'category': 'Music'\r\n            },\r\n            {\r\n                'title': 'Food Festival',\r\n                'description': 'Annual food festival with local restaurants',\r\n                'latitude': 43.0381,\r\n                'longitude': -87.9066,\r\n                'date': timezone.now() + timezone.timedelta(days=5),\r\n                'category': 'Food'\r\n            },\r\n            {\r\n                'title': 'Art Exhibition',\r\n                'description': 'Modern art showcase at Milwaukee Art Museum',\r\n                'latitude': 43.0401,\r\n                'longitude': -87.8972,\r\n                'date': timezone.now() + timezone.timedelta(days=3),\r\n                'category': 'Art'\r\n            },\r\n            {\r\n                'title': 'Tech Meetup',\r\n                'description': 'Network with tech professionals in Milwaukee',\r\n                'latitude': 43.0336,\r\n                'longitude': -87.9125,\r\n                'date': timezone.now() + timezone.timedelta(days=7),\r\n                'category': 'Technology'\r\n            }\r\n        ]\r\n\r\n        for event in sample_events:\r\n            event_date = event['date'].strftime('%B %d, %Y at %I:%M %p')\r\n\r\n            popup_html = f\"\"\"\r\n            <div class=\"event-popup\">\r\n                <h3>{event['title']}</h3>\r\n                <p><strong>Date:</strong> {event_date}</p>\r\n                <p><strong>Category:</strong> {event['category']}</p>\r\n                <p>{event['description']}</p>\r\n            </div>\r\n            \"\"\"\r\n\r\n            folium.Marker(\r\n                location=[event['latitude'], event['longitude']],\r\n                popup=folium.Popup(popup_html, max_width=300),\r\n                tooltip=event['title'],\r\n                icon=folium.Icon(icon=\"info-sign\", prefix='fa', color=\"blue\"),\r\n            ).add_to(marker_cluster)\r\n\r\n        # circle for the search radius\r\n        folium.Circle(\r\n            location=[43.0389, -87.9065],\r\n            radius=5000,\r\n            color='#3186cc',\r\n            fill=True,\r\n            fill_color='#3186cc',\r\n            fill_opacity=0.2,\r\n            tooltip=\"5km radius\"\r\n        ).add_to(m)\r\n\r\n        map_html = m._repr_html_()\r\n\r\n        return render(request, \"homepage.html\", {\r\n            'map_html': map_html,\r\n            'sample_events': sample_events\r\n        })\r\n\r\n    def post(self, request):\r\n        location = request.POST.get('location', 'Milwaukee')\r\n        radius = request.POST.get('radius', 5)\r\n\r\n        try:\r\n            radius = int(radius)\r\n        except ValueError:\r\n            radius = 5\r\n\r\n        # rerender the map with new radius, not implemented yet\r\n        return redirect('homepage')\r\n\r\nclass SettingPage(View):\r\n    def get(self, request):\r\n        email = request.session.get(\"email\")\r\n        if not email:\r\n            return redirect(\"login\") #redirect if unauthenticated\r\n\r\n        try:\r\n            user = User.objects.get(email=email)\r\n            return render(request, \"SettingPage.html\", {\"user\": user})\r\n        except User.DoesNotExist:\r\n            request.session.flush()\r\n            return redirect(\"login\")\r\n\r\n    def post(self, request):\r\n        email = request.session.get(\"email\")\r\n        if not email:\r\n            return redirect(\"login\")  #redirect if unauthenticated\r\n\r\n        try:\r\n            user = User.objects.get(email=email)\r\n        except User.DoesNotExist:\r\n            request.session.flush()\r\n            return redirect('login')\r\n\r\n        if \"logout\" in request.POST:\r\n            request.session.flush()\r\n            return redirect('login')  # Redirects to the root URL (login page)\r\n\r\n        success_message = None\r\n        error_message = None\r\n\r\n        if \"update_email\" in request.POST:\r\n            new_email = request.POST.get(\"email\") #clicked on\r\n            if new_email: #user entered something\r\n                result = change_account_details(user, new_email=new_email)\r\n                if result:\r\n                    success_message = \"Your email has been updated successfully\"\r\n                else:\r\n                    error_message = \"Failed to update email\"\r\n\r\n        elif \"update_username\" in request.POST:\r\n            new_username = request.POST.get(\"username\")\r\n            if new_username:\r\n                result = change_account_details(user, new_username=new_username)\r\n                if result:\r\n                    success_message = \"Your username has been updated successfully\"\r\n                else:\r\n                    error_message = \"Failed to update your username\"\r\n\r\n        elif \"update_first_name\" in request.POST:\r\n            new_first_name = request.POST.get(\"first_name\")\r\n            if new_first_name:\r\n                result = change_account_details(user, new_first_name=new_first_name)\r\n                if result:\r\n                    success_message = \"Your first name has been updated successfully\"\r\n                else:\r\n                    error_message = \"Failed to update your first name\"\r\n\r\n        elif \"update_last_name\" in request.POST:\r\n            new_last_name = request.POST.get(\"last_name\")\r\n            if new_last_name:\r\n                result = change_account_details(user, new_last_name=new_last_name)\r\n                if result:\r\n                    success_message = \"Your last name has been updated successfully\"\r\n                else:\r\n                    error_message = \"Failed to update your last name\"\r\n\r\n        if success_message:\r\n            return redirect(\"settings\")\r\n\r\n        return render(request, \"SettingPage.html\", {\r\n            \"user\": user,\r\n            \"success\": success_message,\r\n            \"error\": error_message\r\n        })\r\n\r\n\r\nclass SignOutView(View):\r\n    def post(self, request):\r\n        logout(request)\r\n        request.session.flush()\r\n        return redirect('login')\r\n\r\n\r\n#Override auth_views.PasswordResetView\r\nclass PasswordResetView(View):\r\n\r\n    def get(self, request):\r\n        return render(request, \"password_reset.html\")\r\n\r\n\r\n    def post(self, request):\r\n        from Methods.sendgrid_reset import send_reset_email\r\n        #put in method where it sends via sendgrid\r\n        check = Reset()\r\n        email = request.POST.get('email')\r\n        user=User.objects.get(email=email)\r\n        #check that the email is valid\r\n        if check.authenticate(email):\r\n            #then get username\r\n            send_reset_email(request,user)\r\n            #if the email is valid and email is send to user email, go to password_reset_done page\r\n            return redirect(\"password_reset_done\")\r\n        else:\r\n            return render(request, \"password_reset.html\", {\"error\": \"Invalid email\"})\r\n\r\nclass PasswordResetDoneView(View):\r\n    def get(self, request,):\r\n        return render(request, \"password_reset_sent.html\")\r\n\r\nclass PasswordResetConfirmView(View):\r\n    def get(self, request, uidb64, token):\r\n        token_generator = CustomTokenGenerator()\r\n        try:\r\n            uid = urlsafe_base64_decode(uidb64).decode()\r\n            user = User.objects.get(pk=uid)\r\n        except (User.DoesNotExist, ValueError, TypeError):\r\n            user = None\r\n\r\n        if user and token_generator.check_token(user, token):\r\n            return render(request, \"password_reset_form.html\", {\"valid\": True, \"uidb64\": uidb64, \"token\": token})\r\n        else:\r\n            return render(request, \"password_reset_form.html\", {\"valid\": False, \"error\": \"Invalid or expired token\"})\r\n\r\n    def post(self, request, uidb64, token):\r\n\r\n        try:\r\n            uid = urlsafe_base64_decode(uidb64).decode()\r\n            user = User.objects.get(pk=uid)\r\n        except (User.DoesNotExist, ValueError, TypeError):\r\n            user = None\r\n\r\n        errors = {}\r\n        check = Reset()\r\n\r\n        password1 = request.POST.get('password1')\r\n        password2 = request.POST.get('password2')\r\n\r\n        if user:\r\n            if check.pass_maximum(password1):\r\n                if check.pass_exact(password1,password2):\r\n                    # now set the password as the user's new password and go to next page\r\n                    check.set_password(user.email, password1)\r\n                    return redirect(\"password_reset_complete\")\r\n                else:\r\n                    return render(request, \"password_reset_form.html\", {\"error\": \"Passwords don't match\"})\r\n            else:\r\n                return render(request, \"password_reset_form.html\", {\"error\": \"Password must be more than 0 characters but less than 51 characters\"})\r\n        else:\r\n            return render(request, \"password_reset_form.html\", {\"valid\": False, \"error\": \"Invalid or expired token\"})\r\n\r\n\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/polls/views.py b/polls/views.py
--- a/polls/views.py	(revision 0b8283febc9ea50b99f93f02095276c594bd393b)
+++ b/polls/views.py	(date 1740701595420)
@@ -20,7 +20,7 @@
 #For resetting password
 from django.contrib.auth import views as auth_views
 from django.shortcuts import render
-from Methods.reset import Reset
+from Methods.Reset import Reset
 from django.utils.http import urlsafe_base64_decode
 from django.contrib.auth.tokens import default_token_generator
 
